/******************************************************************************
 *
 * Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * Use of the Software is limited solely to applications:
 * (a) running on a Xilinx device, or
 * (b) that interact with a Xilinx device through a bus or interconnect.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of the Xilinx shall not be used
 * in advertising or otherwise to promote the sale, use or other dealings in
 * this Software without prior written authorization from Xilinx.
 *
 ******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"

#include "xspips.h"
//#include "xgpio.h"
//
//#define GPIO_DEVICE_ID  XPAR_GPIO_0_DEVICE_ID
//#define GPIO_CHANNEL 1
//
//XGpio GPIO_Handle; /* The Instance of the GPIO Driver */
//
//int GPIO_Init()
//{
//	int GPIO_Status;
//	volatile int delay;
//
//	/* Initialize the GPIO driver */
//	GPIO_Status = XGpio_Initialize(&GPIO_Handle, GPIO_DEVICE_ID);
//	if (GPIO_Status != XST_SUCCESS) {
//		xil_printf("Gpio Initialization Failed\r\n");
//		return XST_FAILURE;
//	}
//
//	/* Set the direction for all signals as inputs except the LED output */
//	XGpio_SetDataDirection(&GPIO_Handle, 1, ~1);
//	//		XGpio_DiscreteClear(&GPIO_Handle, 2, GPIO_CHANNEL);
//	//		for (delay = 0; delay < SPIDC_DELAY; delay++);
//	//		XGpio_DiscreteWrite(&GPIO_Handle, 2, GPIO_CHANNEL);
//	//		for (delay = 0; delay < SPIDC_DELAY; delay++);
//
//	xil_printf("Successfully ran Gpio Example\r\n");
//	return XST_SUCCESS;
//}

#define DAC_SPI_SELECT	0x00

XSpiPs SPI_Instance;
int SPI_Status;

int SPI_Init()
{
	XSpiPs_Config *configPtr;

	configPtr = XSpiPs_LookupConfig(DAC_SPI_SELECT);
	if (configPtr == NULL) {
		return XST_DEVICE_NOT_FOUND;
	}

	SPI_Status = XSpiPs_CfgInitialize(&SPI_Instance, configPtr,
			configPtr->BaseAddress);
	if (SPI_Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	SPI_Status = XSpiPs_SelfTest(&SPI_Instance);
	if (SPI_Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	SPI_Status = XSpiPs_SetOptions(&SPI_Instance, XSPIPS_MASTER_OPTION | XSPIPS_FORCE_SSELECT_OPTION);
	if(SPI_Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	XSpiPs_SetClkPrescaler(&SPI_Instance, XSPIPS_CLK_PRESCALE_256);

	SPI_Status = XSpiPs_SetSlaveSelect(&SPI_Instance, DAC_SPI_SELECT);
	if(SPI_Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	return SPI_Status;
}



int SPI_write(u8 _reg,u8 _data,XSpiPs *SpiInstance,u8 _byteCount)
{
	u8 sendBuffer[_byteCount];
	memset(sendBuffer,0,_byteCount);

	u8 recvBuffer[_byteCount];
	memset(recvBuffer,0x00,_byteCount);

	switch(_byteCount)
	{
		case 2:{
			sendBuffer[0] = _reg;
			sendBuffer[1] = _data;
			break;
		}
		case 4:{
			sendBuffer[0] = 0x00;
			sendBuffer[1] = _reg;
			sendBuffer[2] = 0x00;
			sendBuffer[3] = _data;
			break;
		}
	}

	SPI_Status = XSpiPs_PolledTransfer(SpiInstance, sendBuffer, recvBuffer, _byteCount);
	if (SPI_Status != XST_SUCCESS) {
			return XST_FAILURE;
	}
}


void DAC_reset(XSpiPs *SpiInstance,u8 byteCount)
{
	SPI_write(0x00,0x00,SpiInstance,byteCount);
	SPI_write(0x01,0xC0,SpiInstance,byteCount);
	SPI_write(0x03,0x00,SpiInstance,byteCount);
	SPI_write(0x04,0x00,SpiInstance,byteCount);
	SPI_write(0x05,0x00,SpiInstance,byteCount);
	SPI_write(0x06,0x00,SpiInstance,byteCount);
	SPI_write(0x07,0x00,SpiInstance,byteCount);
	SPI_write(0x08,0x00,SpiInstance,byteCount);
	SPI_write(0x10,0xFF,SpiInstance,byteCount);
	SPI_write(0x11,0xBF,SpiInstance,byteCount);
	SPI_write(0x12,0x00,SpiInstance,byteCount);
	SPI_write(0x14,0xEF,SpiInstance,byteCount);
	SPI_write(0x15,0xC9,SpiInstance,byteCount);
	SPI_write(0x16,0x00,SpiInstance,byteCount);
	SPI_write(0x17,0x00,SpiInstance,byteCount);
	SPI_write(0x18,0xF9,SpiInstance,byteCount);
	SPI_write(0x19,0xE1,SpiInstance,byteCount);
	SPI_write(0x1A,0xF9,SpiInstance,byteCount);
	SPI_write(0x1B,0x01,SpiInstance,byteCount);
	SPI_write(0x1C,0x02,SpiInstance,byteCount);
	SPI_write(0x1D,0x00,SpiInstance,byteCount);
	SPI_write(0x1E,0x00,SpiInstance,byteCount);
	SPI_write(0x1F,0x0A,SpiInstance,byteCount);
	SPI_write(0x20,0x00,SpiInstance,byteCount);
	SPI_write(0x21,0x00,SpiInstance,byteCount);
	SPI_write(0x22,0x12,SpiInstance,byteCount);
	SPI_write(0x23,0x40,SpiInstance,byteCount);
	SPI_write(0x24,0x00,SpiInstance,byteCount);
	SPI_write(0x25,0x00,SpiInstance,byteCount);
	SPI_write(0x26,0x00,SpiInstance,byteCount);
	SPI_write(0x27,0x00,SpiInstance,byteCount);
	SPI_write(0x28,0x00,SpiInstance,byteCount);
	SPI_write(0x29,0x00,SpiInstance,byteCount);
	SPI_write(0x2A,0x00,SpiInstance,byteCount);
	SPI_write(0x2B,0x00,SpiInstance,byteCount);
	SPI_write(0x2C,0x00,SpiInstance,byteCount);
	SPI_write(0x2D,0x00,SpiInstance,byteCount);
	SPI_write(0x30,0x00,SpiInstance,byteCount);
	SPI_write(0x31,0x00,SpiInstance,byteCount);
	SPI_write(0x32,0x00,SpiInstance,byteCount);
	SPI_write(0x33,0x00,SpiInstance,byteCount);
	SPI_write(0x34,0x10,SpiInstance,byteCount);
	SPI_write(0x35,0x00,SpiInstance,byteCount);
	SPI_write(0x36,0x00,SpiInstance,byteCount);
	SPI_write(0x37,0x00,SpiInstance,byteCount);
	SPI_write(0x38,0x00,SpiInstance,byteCount);
	SPI_write(0x3B,0x00,SpiInstance,byteCount);
	SPI_write(0x3C,0x00,SpiInstance,byteCount);
	SPI_write(0x3D,0x00,SpiInstance,byteCount);
	SPI_write(0x3E,0x00,SpiInstance,byteCount);
	SPI_write(0x3F,0x20,SpiInstance,byteCount);
	SPI_write(0x40,0x20,SpiInstance,byteCount);
	SPI_write(0x41,0x01,SpiInstance,byteCount);
	SPI_write(0x42,0x01,SpiInstance,byteCount);
	SPI_write(0x43,0x07,SpiInstance,byteCount);
	SPI_write(0x44,0x8F,SpiInstance,byteCount);
	SPI_write(0x5E,0xFF,SpiInstance,byteCount);
	SPI_write(0x5F,0x07,SpiInstance,byteCount);
	SPI_write(0x79,0x00,SpiInstance,byteCount);
	SPI_write(0x7F,0x05,SpiInstance,byteCount);
	SPI_write(0x80,0x00,SpiInstance,byteCount);
	SPI_write(0xE1,0x00,SpiInstance,byteCount);
}

int DAC_Config(XSpiPs *SpiInstance)
{
	u8 byteCount = 4;

	DAC_reset(SpiInstance,byteCount);

	SPI_write(0x00,0x20,SpiInstance,byteCount); //Device Reset

	SPI_write(0x28,0x00,SpiInstance,byteCount); // Скорость интерполяции 00- 2x (0x00) ; 10 - 4x(0x02) ; 11 - 8x (0x03);
	//SPI_write(0x27,0x00,SpiInstance,byteCount);
	SPI_write(0x01,0x01,SpiInstance,byteCount); // Disable Frame mode

	//Занулить или не трогать эти регистры (сейчас они в RESET)
//	SPI_write(0x12,0x00,SpiInstance,byteCount);
//	SPI_write(0x23,0x40,SpiInstance,byteCount);


//	SPI_write(0x79,0x18,SpiInstance,byteCount);
//	SPI_write(0x5E,0x00,SpiInstance,byteCount);
//	SPI_write(0x5F,0x00,SpiInstance,byteCount);
//	SPI_write(0x5F,0x08,SpiInstance,byteCount);
//
//	SPI_write(0x20,0x01,SpiInstance,byteCount);
//	SPI_write(0x79,0x1B,SpiInstance,byteCount);
//	SPI_write(0x80,0xAD,SpiInstance,byteCount);
//	SPI_write(0xE1,0x1A,SpiInstance,byteCount);

//	SPI_write(0x14,0xE3,SpiInstance,byteCount);
//	SPI_write(0x15,0xC2,SpiInstance,byteCount);
//	SPI_write(0x12,0xC0,SpiInstance,byteCount);
//	SPI_write(0x12,0x80,SpiInstance,byteCount);


	//SPI_write(0x79,0x18,SpiInstance,byteCount);
	//SPI_write(0x80,0xAD,SpiInstance,byteCount);
	//SPI_write(0xE1,0x1A,SpiInstance,byteCount);




	//SPI_write(0x26,0x00,SpiInstance,byteCount); // Задаем режим Data Input Modes WORD
	//SPI_write(0x27,0x44,SpiInstance,byteCount);

	//Если 0x27[0] == 1, то канал Q  = 0
	//
	//SPI_write(0x27,0xFE,SpiInstance,byteCount); //что то работает обратить внимание на уровень


//	SPI_write(0x05,0x7F,SpiInstance,byteCount);
//	SPI_write(0x06,0x07,SpiInstance,byteCount);





	//SPI_write(0x27,0x00,SpiInstance,byteCount);
	//SPI_write(0x25,0x00,SpiInstance,byteCount);
	//SPI_write(0x26,0x00,SpiInstance,byteCount);

	//SPI_write(0x27,0x00,SpiInstance,byteCount);//0xB7

//	SPI_write(0x31,0x00,SpiInstance,byteCount);
//	SPI_write(0x32,0x00,SpiInstance,byteCount);
//	SPI_write(0x33,0x00,SpiInstance,byteCount);
//	SPI_write(0x34,0xC8,SpiInstance,byteCount);
//	SPI_write(0x30,0x01,SpiInstance,byteCount);
//	SPI_write(0x27,0xC0,SpiInstance,byteCount);



	//Мое
	//SPI_write(0x23,0x40,SpiInstance,byteCount); // Задаем числа в FIFO относителбьно выбранной интерполяции
//	SPI_write(0x25,0x01,SpiInstance,byteCount);
//	SPI_write(0x25,0x03,SpiInstance,byteCount);
//	SPI_write(0x25,0x00,SpiInstance,byteCount);
//	SPI_write(0x24,0x00,SpiInstance,byteCount);






	//	sendBuffer[0] = 0x00;
	//	sendBuffer[1] = 0x00;
	//	sendBuffer[2] = 0x00;
	//	sendBuffer[3] = 0x02;


	//	sendBuffer[0] = 0x00;
	//	sendBuffer[1] = 0x26;
	//	sendBuffer[2] = 0x00;
	//	sendBuffer[3] = 0x00;
	//
	//	SPI_Status = XSpiPs_PolledTransfer(SpiInstance, sendBuffer, recvBuffer, byteCount);
	//	if (SPI_Status != XST_SUCCESS) {
	//		return XST_FAILURE;
	//	}
	//
	//
	//
	//	sendBuffer[0] = 0x00;
	//	sendBuffer[1] = 0x01;
	//	sendBuffer[2] = 0x00;
	//	sendBuffer[3] = 0x01;
	//
	//	SPI_Status = XSpiPs_PolledTransfer(SpiInstance, sendBuffer, recvBuffer, byteCount);
	//	if (SPI_Status != XST_SUCCESS) {
	//		return XST_FAILURE;
	//	}






	//00




	//	sendBuffer[0] = 0x00;
	//	sendBuffer[1] = 0x23;
	//	sendBuffer[2] = 0x00;
	//	sendBuffer[3] = 0x20;







	//	sendBuffer[0] = 0x00;
	//	sendBuffer[1] = 0x23;
	//	sendBuffer[2] = 0x00;
	//	sendBuffer[3] = 0x20;
	//
	//	SPI_Status = XSpiPs_PolledTransfer(SpiInstance, sendBuffer, recvBuffer, byteCount);
	//	if (SPI_Status != XST_SUCCESS) {
	//		return XST_FAILURE;
	//	}


	//	//1
	//	sendBuffer[0] = 0x00;
	//	sendBuffer[1] = 0x01;
	//	//2
	//	sendBuffer[2] = 0x23;
	//	sendBuffer[3] = 0x20;



	//	SPI_Status = XSpiPs_PolledTransfer(SpiInstance, sendBuffer, recvBuffer, byteCount);
	//	if (SPI_Status != XST_SUCCESS) {
	//		xil_printf("SPI_Status = %d\n",SPI_Status);
	//		return XST_FAILURE;
	//	}
	//	else
	//	{
	//		xil_printf("SPI_Status = %d\n",SPI_Status);
	//	}

	//	for(int i=0; i <byteCount;i++)
	//	{
	//		xil_printf("recvBuffer[%d] = %d\n",i,recvBuffer[i]);
	//	}

	//
	//	sendBuffer[0] = 0x00;
	//	sendBuffer[1] = 0x0D;
	//	sendBuffer[2] = 0x00;
	//	sendBuffer[3] = 0x86;
	//
	//	SPI_Status = XSpiPs_PolledTransfer(SpiInstance, sendBuffer, recvBuffer, byteCount);
	//	if (SPI_Status != XST_SUCCESS) {
	//		return XST_FAILURE;
	//	}

	//	sendBuffer[0] = 0x00;
	//	sendBuffer[1] = 0x01;//0x01;
	//	sendBuffer[2] = 0x00;
	//	sendBuffer[3] = 0x01;
	//
	//	SPI_Status = XSpiPs_PolledTransfer(SpiInstance, sendBuffer, recvBuffer, byteCount);
	//	if (SPI_Status != XST_SUCCESS) {
	//		return XST_FAILURE;
	//	}

	//	sendBuffer[0] = 0x00;
	//	sendBuffer[1] = 0x25;
	//	sendBuffer[2] = 0x00;
	//	sendBuffer[3] = 0x01;
	//
	//	SPI_Status = XSpiPs_PolledTransfer(SpiInstance, sendBuffer, 0, byteCount);
	//	if (SPI_Status != XST_SUCCESS) {
	//		return XST_FAILURE;
	//	}

	//	sendBuffer[0] = 0x00;
	//	sendBuffer[1] = 0x34;
	//	sendBuffer[2] = 0x00;
	//	sendBuffer[3] = 0x00;
	//
	//	SPI_Status = XSpiPs_PolledTransfer(SpiInstance, sendBuffer, 0, byteCount);
	//	if (SPI_Status != XST_SUCCESS) {
	//		return XST_FAILURE;
	//	}

	return XST_SUCCESS;
}





int main()
{
	init_platform();

	xil_printf("Hello World\n\r");
	print("asdasdHello World\n\r");

	SPI_Init();
	//    GPIO_Init();

	//while(1)

	DAC_Config(&SPI_Instance);


	print("The End\n\r");

	cleanup_platform();
	return 0;
}
